import requests
import logging
from datetime import date, datetime
import os

from telegram.ext import Updater, MessageHandler, CommandHandler, Filters


WEATHER_API_KEY = 'pbVFUZSS0EPziOMbZrnBEdYQLA0DUN38'
WEATHER_API_URL = 'https://api.climacell.co/v3/weather/forecast/daily'


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def get_min_and_max_values(metric_name, weather_json):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ `metric_name` –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.

    :param metric_name: –∏–º—è –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 'temp'
    :param weather_json: –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    :return: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'min' –∏ 'max'
    """

    for metric_data in weather_json[metric_name]:
        try:
            min_value = metric_data['min']['value']
        except KeyError:
            pass

        try:
            max_value = metric_data['max']['value']
        except KeyError:
            pass

    try:
        return {'min': min_value, 'max': max_value}
    except UnboundLocalError:
        raise KeyError(f"Could't find min or max value for {metric_name}")


def json_weather_to_human_string(weather_json):
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç JSON —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param weather_json: JSON c –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    :return: —Å—Ç—Ä–æ–∫–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    """

    temperature = get_min_and_max_values('temp', weather_json)
    temp_str = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –æ—Ç {temperature['min']} –¥–æ {temperature['max']}¬∞C"
    precipitation_probability_str = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {weather_json['precipitation_probability']['value']}%"
    pressure = get_min_and_max_values('baro_pressure', weather_json)
    pressure_str = f"–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç {pressure['min']} –¥–æ {pressure['max']} –º–º —Ä—Ç. —Å—Ç."
    humidity = get_min_and_max_values('humidity', weather_json)
    humidity_str = f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: –æ—Ç {humidity['min']} –¥–æ {humidity['max']}%"
    return f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {weather_json['observation_time']['value']}\n{temp_str}\n{precipitation_probability_str}\n" \
           f"{pressure_str}\n{humidity_str}"


def get_weather_from_api(forecast_date):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ API –Ω–∞ –¥–∞—Ç—É `forecast_date`. –í –æ—Ç–≤–µ—Ç–µ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ JSON, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä—É–Ω–ª—Å—è –æ—Ç API.
    –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –∏–ª–∏ –±–æ–ª–µ–µ —á–µ–º 15 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥, —Ç–æ –±—É–¥–µ—Ç –≤—ã–∫–∏–Ω—É—Ç–æ ValueError.

    :param forecast_date: –¥–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑
    :return: JSON —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –Ω–∞ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É
    dates_diff = (forecast_date.date() - date.today()).days
    if dates_diff < 0 or dates_diff > 14:
        raise ValueError(f"Wrong date. Forecast a   vailable only for 15 days.")

    querystring = {"lat": "57.626559",
                   "lon": "39.893804",
                   "unit_system": "si",
                   "start_time": "now",
                   "fields": "temp,humidity,baro_pressure:mmHg,precipitation_probability",
                   "apikey": WEATHER_API_KEY}
    response = requests.request("GET", WEATHER_API_URL, params=querystring)
    return response.json()[dates_diff]


def start(update, context):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """

    update.message.reply_text(f'üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –Ø—Ä–æ—Å–ª–∞–≤–ª–µ –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É'
                              f' (–≤ –ø–µ—Ä–µ–¥–µ–ª–∞—Ö 15 –¥–Ω–µ–π).\n–ü–∏—à–∏ –º–Ω–µ –¥–∞—Ç—É –≤ –æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥" (–Ω–∞–ø—Ä–∏–º–µ—Ä:'
                              f' 20.08.2020) –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑.')


def forecast_request(update, context):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏
    –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–≥–æ–¥—ã.
    """

    try:
        requested_date = datetime.strptime(f'{update.message.text} 00:00:00', '%d.%m.%Y %H:%M:%S')
    except ValueError:
        update.message.reply_text(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
    else:
        try:
            update.message.reply_text(json_weather_to_human_string(get_weather_from_api(requested_date)))
        except ValueError:
            update.message.reply_text(f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ 15 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.')
        except requests.exceptions.RequestException:
            update.message.reply_text(f'–°–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ.')
        except:
            update.message.reply_text(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ.')


def main():
    try:
        updater = Updater(os.environ['TG_API_KEY'], use_context=True)
    except KeyError:
        print("Can't find TG_API_KEY environment variable.")
        exit(1)
    else:
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler('start', start))
        dispatcher.add_handler(MessageHandler(Filters.text & (~Filters.command), forecast_request))

        updater.start_polling()
        updater.idle()


if __name__ == '__main__':
    main()
